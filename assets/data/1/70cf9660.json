{"data":{"tag":{"title":"design-patterns","belongsTo":{"edges":[{"node":{"title":"Padrão Observer - Javascript","path":"/padrao-observer-javascript","date":"20/09/2019","timeToRead":3,"description":"Neste artigo estaremos começando uma série de posts/estudos sobre padrões de projeto de software e como podemos usá-los com javascript. Esse será o primeiro artigo e nele falo brevemente sobre o padrão observer e tento mostrar na prática como funciona. Estaremos criando uma mini biblioteca que torna nossa aplicação reativa, bem similar ao que React ou Vue fazem.","coverImage":"/images/uploads/observer-pattern.jpeg","content":"<h2 id=\"o-que-é-o-padrão-observer\"><a href=\"#o-que-%C3%A9-o-padr%C3%A3o-observer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>O que é o Padrão Observer</h2>\n<blockquote>\n<p>É um padrão de design de software no qual um objeto (chamado de <code class=\"language-text\">Subject</code>), mantém uma lista de seus dependentes (<code class=\"language-text\">Observers</code>) e os notifica automaticamente sobre qualquer alteração de estado, geralmente invocando um de seus métodos.</p>\n</blockquote>\n<p>Este padrão define um relacionamento um para muitos; Assim, quando um objeto (<code class=\"language-text\">subject</code>) é atualizado, ele notifica todos outros objetos (<code class=\"language-text\">observers</code>) de que eles foram atualizados.</p>\n<p>Quando começamos a estudar padrões de projeto, é difícil imaginar quando podemos usar ou como podemos identificar se estão sendo usados e aonde estariam aplicados.</p>\n<p>Se pararmos pra pensar, ele é utilizado por muitas aplicações e frameworks na web. Alguns exemplos que me vieram à cabeça ao estudar o padrão recentemente foi o \"Framework Progressivo\" VueJs e a lib React. De fato, é assim que a reatividade funciona em alguns desses framework's.</p>\n<p>Imagine que temos vários estados na nossa aplicação e queremos que os estados sejam atualizados quando algo importante acontece.</p>\n<h2 id=\"analogia\"><a href=\"#analogia\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Analogia</h2>\n<p>Vamos analisar um exemplo da vida real, imagine como uma newsletter funciona:</p>\n<ul>\n<li>Seu blog preferido começa a publicar vários artigos na semana, logo você não irá querer perder as novidades.</li>\n<li>Você então resolve assinar a newsletter, agora sempre será avisado quando algo novo for publicado, até o momento que você não quiser mais.</li>\n<li>Em um segundo momento você resolve que não é mais interessante receber aquilo, então você cancela a assinatura e o blog pára de enviar as novidades.</li>\n<li>Enquanto você cancela, podem ter várias outras pessoas assinando e cancelando a assinatura.</li>\n</ul>\n<p>No padrão observer, o <em>Blog</em> seria o <em>Subject</em> e <em>você</em> seria o <em>Observer</em>.</p>\n<h2 id=\"prática\"><a href=\"#pr%C3%A1tica\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prática</h2>\n<p>Para implementar os padrões de projeto temos que ter em mente que a grande maioria deles tem um contrato a ser seguido. Ele pode ser representado em progração orientada a objetos como uma <code class=\"language-text\">interface</code>, como não temos esse recurso, iremos implementar classes que representam nossos contratos, onde outras classes podem extender delas.</p>\n<h3 id=\"classe-subject\"><a href=\"#classe-subject\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Classe Subject</h3>\n<p>Nós teremos a classe Subject que irá manter uma lista de Observers que precisam ser notificados quando ocorrer uma atualização e também terá outras responsabilidades como adicionar ou remover Observers.</p>\n<h3 id=\"classe-observer\"><a href=\"#classe-observer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Classe Observer</h3>\n<p>O objetivo da classe Observer é implementar um método update() que será chamado pelo método Subject notify(). Onde o update será responsável por renderizar o elemento novamente.</p>\n<h4 id=\"mini-biblioteca\"><a href=\"#mini-biblioteca\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mini biblioteca</h4>\n<p>Vamos ver como seria esse código na prática implementando uma mini lib de estados e renderização similar ao que o <code class=\"language-text\">React</code> faz. Nosso projetinho será o famoso <em>TODO list</em>.</p>\n<p>Subject: aqui teremos o contrato/métodos que serão implementados ou herdados, ele é reponsável por notificar todos os observadores.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subscriber</span> <span class=\"token operator\">=></span> subscriber <span class=\"token operator\">!==</span> observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span> <span class=\"token operator\">=></span> observer<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Subject</code></pre>\n<p>Observer: aqui vemos o contrato do obersevador, onde ele tem um método para atualização dos seus objetos.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Observer</code></pre>\n<p>Store: responsável por manter o estado da nossa aplicação, ele assina o contrato/herda de Subject, nele temos como recuperar um estado usando método <code class=\"language-text\">get()</code> e temos como atualizar usando método <code class=\"language-text\">update()</code> onde dentro dele é executado o método <code class=\"language-text\">notify()</code>, responsável por atualizar a aplicação passando o estado.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Subject <span class=\"token keyword\">from</span> <span class=\"token string\">'./Subject'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Store</code></pre>\n<p>O Exemplo completo estará no <a href=\"https://github.com/iagocavalcante/design-pattern-js/tree/master/observer-pattern\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">link</a>.</p>\n<h4 id=\"referências-usadas-para-elaboração-do-artigo\"><a href=\"#refer%C3%AAncias-usadas-para-elabora%C3%A7%C3%A3o-do-artigo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Referências usadas para elaboração do artigo</h4>\n<ul>\n<li><a href=\"https://www.amazon.com.br/Cabe%C3%A7a-Padr%C3%B5es-Projetos-Eric-Freeman/dp/8576081741\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Use a Cabeça ! Padrões de Projetos (design Patterns) - 2ª Edição</a></li>\n<li><a href=\"https://webdevstudios.com/2019/02/19/observable-pattern-in-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to Use the Observable Pattern in JavaScript</a> </li>\n<li><a href=\"https://pawelgrzybek.com/the-observer-pattern-in-javascript-explained/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Observer Pattern in JavaScript explained</a></li>\n<li><a href=\"https://www.sitepoint.com/javascript-design-patterns-observer-pattern/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Design Patterns: The Observer Pattern</a></li>\n<li><a href=\"https://dev.to/erikwhiting88/observer-design-pattern-tutorial-in-javascript-fun-with-a-language-api-21o3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Observer Design Pattern tutorial in JavaScript + Fun With a Language API</a></li>\n</ul>\n"}}]}}},"context":{}}